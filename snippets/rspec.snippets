extends rails

snippet aft "aft"
after(${1::each}) do
	${2}
end
endsnippet
snippet anr "anr"
and_return(${1:value})
endsnippet
snippet anra "anra"
and_raise(${1:exception})
endsnippet
snippet anrb "anrb"
and_return { ${1} }
endsnippet
snippet ant "ant"
and_throw(${1:sym})
endsnippet
snippet any "any"
and_yield(${1:values})
endsnippet
snippet avf "avf"
it {should accept_values_for(:${1:}, ${2})}
it {should_not accept_values_for(:$1, ${3:nil})}
endsnippet
snippet avfn "avfn"
it {should_not accept_values_for(:${1}, ${2:nil})}
endsnippet
snippet bef "bef"
before(:each) do
	${1}
end
endsnippet
snippet befa "befa"
before(:all) do
	${1}
end
endsnippet
snippet des "des"
describe "${1}" do
	${2}
end
endsnippet
snippet desa "desa"
describe "${1:get} ${2:show}" do
  subject { $1 :${3:$2} }

  it { should be_${4:success} }

end
endsnippet
snippet desc "desc"
require 'spec_helper'

describe ${1:`!v Snippet_RubySpecNameFromFilename()`} do
	${2}
end
endsnippet
snippet desm "desm"
require 'spec_helper'

describe ${1:`!v Snippet_RubySpecNameFromFilename()`} do
  
	subject { FactoryGirl.build(:${2:`!v Snippet_RubyFactoryNameFromFilename()`}) }

	it {should be_valid}

end
endsnippet
snippet desns "desns"
describe ".${1:}" do

  subject { described_class.$1${2} }

	it { should include(${3})}

	it { should_not include(${4})}


end
endsnippet
snippet dess "dess"
describe "${1:name}" do
	${2}
end
endsnippet
snippet dest "dest"
describe ${1:Type} do
	${2}
end
endsnippet
snippet atl "atl"
at_least(${1:n}).times
endsnippet
snippet atm "atm"
at_most(${1:n}).times
endsnippet
snippet con "con"
context "${1}" do
  ${2}
end
endsnippet
snippet cona "cona"
context "after #${1:save!}" do
  before(:each) do
    subject.$1
	end
	${2}
end
endsnippet
snippet ex "ex"
exactly(${1:n}).times
endsnippet
snippet fc "fc"
FactoryGirl.create(:${1:`!v Snippet_RubyFactoryNameFromFilename()`}, ${2})
endsnippet
snippet fca "fca"
association :${1}
endsnippet
snippet fcat "fcat"
FactoryGirl.attributes_for(:${1:`!v Snippet_RubyFactoryNameFromFilename()`})
endsnippet
snippet fcb "fcb"
FactoryGirl.build(:${1:`!v Snippet_RubyFactoryNameFromFilename()`})
endsnippet
snippet fcc "fcc"
FactoryGirl.create(:${1:`!v Snippet_RubyFactoryNameFromFilename()`})
endsnippet
snippet fcd "fcd"
FactoryGirl.define do
  factory :${1} do
    ${2}
  end
end
endsnippet
snippet fcn "fcn"
FactoryGirl.next(:${1:sequence-name})
endsnippet
snippet fcs "fcs"
f.sequence(:${1}) {|n| "${2}#{n}"}
endsnippet
snippet is "is"
it { should ${1} }
endsnippet
snippet isbl "isbl"
it_should_behave_like '${1}'
endsnippet
snippet isn "isn"
it { should_not ${1} }
endsnippet
snippet it "it"
it "${1}" do
	${2}
end
endsnippet
snippet its "its"
it "should ${1:work correctly}" do
  ${2}
end
endsnippet
snippet let "let"
let(:${1}) { ${2} }
endsnippet
snippet letf "letf"
let(:${1:model}) do 
  FactoryGirl.create(:${2:$1})
end
endsnippet
snippet mat "mat"
class ${1:ReverseTo}
	def initialize(${2:param})
		@$2 = $2
	end

	def matches?(actual)
		@actual = actual
		# Satisfy expectation here. Return false or raise an error if it's not met.
		${3:@actual.reverse.should == @$2}
		true
	end

	def failure_message
		"expected #{@actual.inspect} to ${4} #{@$2.inspect}, but it didn't"
	end

	def negative_failure_message
		"expected #{@actual.inspect} not to ${5} #{@$2.inspect}, but it did"
	end
end

def ${6:reverse_to}(${7:expected})
	${8}.new($7)
end
endsnippet
snippet seg "seg"
shared_examples_for "${1:}" do
  ${2}
end
endsnippet
snippet sh "sh"
${1:target}.should == ${2:value}
${3}
endsnippet
snippet shb "shb"
${1:target}.should be(${2:result})
${3}
endsnippet
snippet shbc "shbc"
${1:target}.should be_close(${2:result}, ${3:tolerance})
${4}
endsnippet
snippet shbio "shbio"
${1:target}.should be_instance_of(${2:class})
${3}
endsnippet
snippet shbko "shbko"
${1:target}.should be_a_kind_of(${2:class})
${3}
endsnippet
snippet shbr "shbr"
response.should be_redirect
${1}
endsnippet
snippet shbs "shbs"
response.should be_success
${1}
endsnippet
snippet shc "shc"
lambda do
	${1}
end.should change(${2:described_class}, :${3:count}).by(${4:1})
endsnippet
snippet shdm "shdm"
${1:target}.should match(/${2:regexp}/)
${3}
endsnippet
snippet she "she"
${1:target}.should eql(${2:value})
${3}
endsnippet
snippet sheq "sheq"
${1:target}.should equal(${2:value})
${3}
endsnippet
snippet shh "shh"
${1:target}.should have(${2:num}).${3:things}
${4}
endsnippet
snippet shhal "shhal"
${1:target}.should have_at_least(${2:num}).${3:things}
${4}
endsnippet
snippet shham "shham"
${1:target}.should have_at_most(${2:num}).${3:things}
${4}
endsnippet
snippet shhr "shhr"
${1:target}.should have(${2:n}).records
${3}
endsnippet
snippet shn "shn"
${1:target}.should_not == ${2:value}
${3}
endsnippet
snippet shnb "shnb"
${1:target}.should_not be(${2:result})
${3}
endsnippet
snippet shnbc "shnbc"
${1:target}.should_not be_close(${2:result}, ${3:tolerance})
${4}
endsnippet
snippet shnbio "shnbio"
${1:target}.should_not be_instance_of(${2:klass})
${3}
endsnippet
snippet shnbko "shnbko"
${1:target}.should_not be_a_kind_of(${2:klass})
${3}
endsnippet
snippet shnbr "shnbr"
response.should_not be_redirect
${1}
endsnippet
snippet shnbs "shnbs"
response.should_not be_success
${1}
endsnippet
snippet shnc "shnc"
lambda do
	${1}
end.should_not change(${2:target}, :${3:method})
endsnippet
snippet shne "shne"
${1:target}.should_not eql(${2:value})
${3}
endsnippet
snippet shneq "shneq"
	${1:target}.should_not equal(${2:value})
	${3}
endsnippet
snippet shnm "shnm"
${1:target}.should_not match(/${2:regexp}/)
${3}
endsnippet
snippet shnp "shnp"
${1:target}.should_not be_${2:predicate}
endsnippet
snippet shnr "shnr"
${1:mock}.should_not_receive(:${2:message})${3}
${4}
endsnippet
snippet shnre "shnre"
${1:target}.should_not raise_error(${2:error})
${3}
endsnippet
snippet shnredt "shnredt"
response.should_not redirect_to(${1:url})
${2}
endsnippet
snippet shnrt "shnrt"
${1:target}.should_not respond_to(:${2:sym})
${3}
endsnippet
snippet shns "shns"
${1:target}.should_not satisfy { |${2:obj}| ${3} }
${4}
endsnippet
snippet shnt "shnt"
lambda { ${1} }.should_not throw_symbol(:${2:symbol})
${3}
endsnippet
snippet shp "shp"
${1:target}.should be_${2:predicate}
endsnippet
snippet shr "shr"
${1:mock}.should_receive(:${2:message})${3}
${4}
endsnippet
snippet shre "shre"
${1:target}.should raise_error(${2:error})
${3}
endsnippet
snippet shredt "shredt"
response.should redirect_to(${1:url})
${2}
endsnippet
snippet shrt "shrt"
${1:target}.should respond_to(:${2:sym})
${3}
endsnippet
snippet shs "shs"
${1:target}.should satisfy { |${2:obj}| ${3} }
${4}
endsnippet
snippet sht "sht"
${1:target}.should throw_symble(:${2:symbol})
${3}
endsnippet
snippet shtemp "shtemp"
response.should render_template(:${1:template})
${2}
endsnippet
snippet st "st"
stubs(:${1}).returns(${2})
endsnippet
snippet subj "subj"
subject { ${1:Factory.build(described_class.to_s.underscore)} }
endsnippet
snippet task "task"
desc "${1:Task description}"
task :${2:task_name}${3: => ["${4:dependent}"]} do
	${5}
end
endsnippet
