snippet cl "cl"
class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	private:
		${3:/* data */}
};
endsnippet
snippet def "def"
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif${3}
endsnippet
snippet do "do"
do {
	${2:/* code */}
} while (${1:/* condition */});
endsnippet
snippet el "el"
else {
	${1}
}
endsnippet
snippet for "for"
for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}
endsnippet
snippet forr "forr"
for (${1:i} = 0; ${2:$1 < 5}; $1${3:++}) {
	${4:/* code */}
}
endsnippet
snippet fpf "fpf"
fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
endsnippet
snippet fun "fun"
${1:void} ${2:function_name} (${3})
{
	${4:/* code */}
}
endsnippet
snippet if "if"
if (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet
snippet main "main"
int main (int argc, char const* argv[])
{
	${1:/* code */}
	return 0;
}
endsnippet
snippet map "map"
std::map<${1:key}, ${2:value}> map${3};
endsnippet
snippet ns "ns"
namespace ${1:`Filename('', 'my')`} {
	${2}
} /* $1 */
endsnippet
snippet once "once"
#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
#define $1

${2}

#endif /* end of include guard: $1 */
endsnippet
snippet pr "pr"
printf("${1:%s}\n"${2});${3}
endsnippet
snippet readfile "readfile"
std::vector<char> v;
if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while (size_t len = fread(buf, 1, sizeof(buf), $2))
		v.insert(v.end(), buf, buf + len);
	fclose($2);
}${3}
endsnippet
snippet st "st"
struct ${1:`Filename('$1_t', 'name')`} {
	${2:/* data */}
}${3: /* optional variable list */};${4}
endsnippet
snippet t "t"
${1:/* condition */} ? ${2:a} : ${3:b}'
endsnippet
snippet td "td"
typedef ${1:int} ${2:MyCustomType};
endsnippet
snippet tds "tds"
typedef struct {
	${2:/* data */}
} ${1:`Filename('$1_t', 'name')`};
endsnippet
snippet vector "vector"
std::vector<${1:char}> v${2};
endsnippet
snippet wh "wh"
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet
