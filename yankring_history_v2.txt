          <%# TODO: implement %>,V
        <%# TODO: implement %>,V
    <%# TODO: implement %>,V
        #conditions(["distributions.created_at <= ?", @to_date.end_of_day]).        #conditions(["distributions.created_at >= ?", @from_date.beginning_of_day]),V
_date,v
#{table_name},v
{table_name},v
distributions,v
@from_date,v
.,v
_,v
o,v
t,v
@,v
        conditions(["distributions.created_at <= ?", @to_date.end_of_day]).        conditions(["distributions.created_at >= ?", @from_date.beginning_of_day]),V
,V
          #named_scope :not_older_than, lambda { |interval|             #{               #:conditions => [ "created_at >= ?", interval.ago ],            #}           #},V
,,v
              :conditions => [ "created_at >= ?", interval.ago ],,V
ExpressionError,v
http://techcrunch.com/2010/09/30/googl-easter-egg,v
 "expression incorrectly formed",v
    return nil,V
Net::SMTPFatalError: 555 5.5.2 Syntax error. x34sm1079908qci.30,v
    puts exp,V
    puts yield exp,V
 ,v
      puts exp,V
ne,v
    context "with '|' where one true" do      let(:string) { "0 | 2" }      it {should be_true}    end,V
/home/bogdan/Dropbox/docs/spd/privat/CD_PRIVAT24/KEY1,v
require "ar_after_transaction",V
l,v
",v
ar_after_transaction 0.1.0,v
    #task :setup    #desc "Start a Resque worker"    #task :run => :setup do      #require 'resque'      #worker = nil      #queues = (ENV['QUEUES'] || ENV['QUEUE']).to_s.split(',')      #begin        #worker = Resque::Worker.new(*queues)        #worker.verbose = ENV['LOGGING'] || ENV['VERBOSE']        #worker.very_verbose = ENV['VVERBOSE']      #rescue Resque::NoQueueError        #abort "set QUEUE env var, e.g. $ QUEUE=critical,high rake resque:work"      #end      #puts "*** Starting worker #{worker}"      ##Parsing worker pid out      #pid = worker.to_s.split(":")[1].to_i      ##Let's write pid-file to rails tmp/pids directory      #pid_path = File.expand_path(File.dirname(__FILE__) + "/../../tmp/pids")      #Dir.mkdir(pid_path) unless File.directory?(pid_path)      #filename = "#{pid_path}/resque-worker-#{pid}.pid"      #pidfile = File.open(filename, "w")      #pidfile.write(pid)      #pidfile.close      #worker.work(ENV['INTERVAL'] || 5) # interval, will block    #end    #desc "Start multiple Resque workers"    #task :workers do      #threads = []      #ENV['COUNT'].to_i.times do        #threads << Thread.new do          #system "rake resque:work"        #end      #end      #threads.each { |thread| thread.join }    #end,V
  # Overriding default resque startup  # require 'resque/tasks'  # will give you the resque tasks,V
http://redis.googlecode.com/files/redis-2.0.2.tar.gz,v
        ri http,V
      Resque::Failure::Hoptoad.configure do |config|        #TODO: Add Hoptoad key here        config.api_key = ''        config.secure = false        #config.subdomain = 'railsware'      end      Resque::Failure.backend = Resque::Failure::Hoptoad,V
true,v
1.0.5,v
no,v
4.2,v
8,v
  config.secure = false,V
  #config.secure = true,V
'',v
require 'resque/failure/redis',v
redis,v
require 'resque/failure/redis',V
Resque::Failure.backend = Resque::Failure::Hoptoad,V
Resque::Failure::Multiple.classes = [Resque::Failure::Redis, Resque::Failure::Hoptoad]Resque::Failure.backend = Resque::Failure::Multiple,V
Resque::Failure::Multiple.classes = [Resque::Failure::Redis, Resque::Failure::Hoptoad]Resque::Failure.backend = Resque::Failure::Multiple,v
  config.api_key = Settings.hoptoad_key,V
 '3c51492ff78a2cffaf2eed84f4c161ae',v
3c51492ff78a2cffaf2eed84f4c161ae,v
  #config.subdomain = 'railsware',V
  #TODO: Add Hoptoad key here,V
      Resque::Failure::Hoptoad.configure do |config|        #TODO: Add Hoptoad key here        config.api_key = ''        config.secure = true        #config.subdomain = 'railsware'      end      Resque::Failure.backend = Resque::Failure::Hoptoad,V
git@github.com:bogdan/dotbash.git,v
\h,v
/master,v
export STARTWIRE="/var/data/www/apps/startwire/current",v
 "origin/master",v
,V
backup(){	mkdir -p $1 || exit 1	ARCHFILE="$1/backup.`ymd`.tar.gz"	ITEMS="\	/home/screamer/projects/ \	/home/screamer/access/ \	/mnt/d/different/ \	/mnt/d/games/hl/valve/hlscr.cfg \	/home/screamer/.bashrc \	/home/screamer/.vimrc \	/home/screamer/.purple/	"	tar -zcf $ARCHFILE $ITEMS 	},V
cfg_dir="cfg",V
export HOCOM="s1.ho.com.ua",V
cfgget(){	if ! ping -c 3 $HOCOM > /dev/null 2> /dev/null ; then		echo $HOCOM not respond.		exit 1	fi	ftp $HOCOM << EOF	passive	verbose	cd $cfg_dir	lcd ~	get .bashrc	get .vimrcEOF}cfgput(){	if ! ping -c 1 $HOCOM > /dev/null 2> /dev/null ; then		echo $HOCOM not respond.		return	fi	ftp $HOCOM << EOF	passive	verbose	cd $cfg_dir	lcd ~	put .bashrc	put .vimrcEOF},V
cfgget(){	if ! ping -c 3 $HOCOM > /dev/null 2> /dev/null ; then		echo $HOCOM not respond.		exit 1	fi	ftp $HOCOM << EOF	passive	verbose	cd $cfg_dir	lcd ~	get .bashrc	get .vimrcEOF}cfgput(){	if ! ping -c 1 $HOCOM > /dev/null 2> /dev/null ; then		echo $HOCOM not respond.		return	fi	ftp $HOCOM << EOF	passive	verbose	cd $cfg_dir	lcd ~	put .bashrc	put .vimrcEOF,V
rails3_test,v
git remote add origin git@github.com:bogdan/dotbash.git  git push origin master,v
chris.forman@startdatelabs.com,v
/!([^ &|]+)/,v
},v
{,v
#,v
#{e.message},v
Keywords ,v
e.message,v
("! a"),v
    counter += 1,V
check_counter,v
    puts 'hz',V
    counter = 0,V
'hz',v
        puts $1,V
      exp.sub!(/!([^ &|]+)/) do        puts $1        (! yield exp[$1]).to_s      end,V
      exp.sub!(/!([^ &|]+)/) do        (! yield exp[$1]).to_s      end,V
et,v
      check_counter(counter),V
class_method_name,v
      counter += 1,V
      ,V
    if counter > 1000,V
    ri exp,V
@exp,v
self.,v
exp,v
